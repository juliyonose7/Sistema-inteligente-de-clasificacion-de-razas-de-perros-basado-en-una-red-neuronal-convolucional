#!/usr/bin/env python3
"""
üîç AN√ÅLISIS DE SESGOS EN EL MODELO DE CLASIFICACI√ìN DE PERROS
============================================================

Este script analiza diferentes tipos de sesgos en el sistema de clasificaci√≥n:
1. Sesgo de representaci√≥n (dataset)
2. Sesgo demogr√°fico/geogr√°fico 
3. Sesgo de popularidad cultural
4. Sesgo t√©cnico/arquitectural
5. Sesgo de evaluaci√≥n

Autor: Sistema IA
Fecha: 2024
"""

import os
import json
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
from collections import defaultdict, Counter
import torch
import torch.nn.functional as F
from PIL import Image
from torchvision import transforms
import warnings
warnings.filterwarnings('ignore')

class BiasDetectionAnalyzer:
    def __init__(self, workspace_path: str):
        self.workspace_path = Path(workspace_path)
        self.breed_data_path = self.workspace_path / "breed_processed_data" / "train"
        self.yesdog_path = self.workspace_path / "DATASETS" / "YESDOG"
        
        # Informaci√≥n geogr√°fica y cultural de razas
        self.breed_geography = {
            # Razas Europeas
            'German_shepherd': {'region': 'Europe', 'country': 'Germany', 'popularity': 'very_high'},
            'Rottweiler': {'region': 'Europe', 'country': 'Germany', 'popularity': 'high'},
            'Doberman': {'region': 'Europe', 'country': 'Germany', 'popularity': 'high'},
            'Great_Dane': {'region': 'Europe', 'country': 'Germany', 'popularity': 'medium'},
            'Weimaraner': {'region': 'Europe', 'country': 'Germany', 'popularity': 'medium'},
            'Scottish_deerhound': {'region': 'Europe', 'country': 'Scotland', 'popularity': 'low'},
            'Border_collie': {'region': 'Europe', 'country': 'UK', 'popularity': 'very_high'},
            'English_setter': {'region': 'Europe', 'country': 'England', 'popularity': 'medium'},
            'Irish_setter': {'region': 'Europe', 'country': 'Ireland', 'popularity': 'medium'},
            'Airedale': {'region': 'Europe', 'country': 'England', 'popularity': 'medium'},
            'Norfolk_terrier': {'region': 'Europe', 'country': 'England', 'popularity': 'low'},
            'Norwich_terrier': {'region': 'Europe', 'country': 'England', 'popularity': 'low'},
            'Yorkshire_terrier': {'region': 'Europe', 'country': 'England', 'popularity': 'very_high'},
            'Bedlington_terrier': {'region': 'Europe', 'country': 'England', 'popularity': 'low'},
            'Border_terrier': {'region': 'Europe', 'country': 'UK', 'popularity': 'medium'},
            'Kerry_blue_terrier': {'region': 'Europe', 'country': 'Ireland', 'popularity': 'low'},
            'Lakeland_terrier': {'region': 'Europe', 'country': 'England', 'popularity': 'low'},
            'Sealyham_terrier': {'region': 'Europe', 'country': 'Wales', 'popularity': 'low'},
            'Saint_Bernard': {'region': 'Europe', 'country': 'Switzerland', 'popularity': 'high'},
            'Bernese_mountain_dog': {'region': 'Europe', 'country': 'Switzerland', 'popularity': 'high'},
            'EntleBucher': {'region': 'Europe', 'country': 'Switzerland', 'popularity': 'low'},
            'Great_Pyrenees': {'region': 'Europe', 'country': 'France', 'popularity': 'medium'},
            'Newfoundland': {'region': 'North America', 'country': 'Canada', 'popularity': 'medium'},
            'Italian_greyhound': {'region': 'Europe', 'country': 'Italy', 'popularity': 'medium'},
            'Norwegian_elkhound': {'region': 'Europe', 'country': 'Norway', 'popularity': 'medium'},
            
            # Razas Asi√°ticas
            'Shih-Tzu': {'region': 'Asia', 'country': 'China', 'popularity': 'very_high'},
            'Lhasa': {'region': 'Asia', 'country': 'Tibet', 'popularity': 'medium'},
            'Pug': {'region': 'Asia', 'country': 'China', 'popularity': 'very_high'},
            'Japanese_spaniel': {'region': 'Asia', 'country': 'Japan', 'popularity': 'medium'},
            'Tibetan_terrier': {'region': 'Asia', 'country': 'Tibet', 'popularity': 'low'},
            'chow': {'region': 'Asia', 'country': 'China', 'popularity': 'medium'},
            'Samoyed': {'region': 'Asia', 'country': 'Russia', 'popularity': 'high'},
            'Siberian_husky': {'region': 'Asia', 'country': 'Russia', 'popularity': 'very_high'},
            
            # Razas Americanas
            'Boston_bull': {'region': 'North America', 'country': 'USA', 'popularity': 'high'},
            'Labrador_retriever': {'region': 'North America', 'country': 'Canada', 'popularity': 'very_high'},
            'Chesapeake_Bay_retriever': {'region': 'North America', 'country': 'USA', 'popularity': 'medium'},
            
            # Razas del Medio Oriente/√Åfrica
            'Afghan_hound': {'region': 'Middle East', 'country': 'Afghanistan', 'popularity': 'medium'},
            'Saluki': {'region': 'Middle East', 'country': 'Middle East', 'popularity': 'low'},
            'basenji': {'region': 'Africa', 'country': 'Central Africa', 'popularity': 'low'},
            
            # Razas Australianas
            'Australian_terrier': {'region': 'Oceania', 'country': 'Australia', 'popularity': 'medium'},
            
            # Otras razas (clasificaci√≥n por caracter√≠sticas)
            'beagle': {'region': 'Europe', 'country': 'England', 'popularity': 'very_high'},
            'basset': {'region': 'Europe', 'country': 'France', 'popularity': 'high'},
            'bloodhound': {'region': 'Europe', 'country': 'Belgium', 'popularity': 'medium'},
            'bluetick': {'region': 'North America', 'country': 'USA', 'popularity': 'low'},
            'whippet': {'region': 'Europe', 'country': 'England', 'popularity': 'medium'},
            'Ibizan_hound': {'region': 'Europe', 'country': 'Spain', 'popularity': 'low'},
            'Irish_wolfhound': {'region': 'Europe', 'country': 'Ireland', 'popularity': 'medium'},
            'Rhodesian_ridgeback': {'region': 'Africa', 'country': 'Zimbabwe', 'popularity': 'medium'},
            'Maltese_dog': {'region': 'Europe', 'country': 'Malta', 'popularity': 'high'},
            'papillon': {'region': 'Europe', 'country': 'France', 'popularity': 'medium'},
            'Pomeranian': {'region': 'Europe', 'country': 'Germany', 'popularity': 'high'},
            'silky_terrier': {'region': 'Oceania', 'country': 'Australia', 'popularity': 'low'},
            'toy_terrier': {'region': 'Europe', 'country': 'England', 'popularity': 'medium'},
            'Blenheim_spaniel': {'region': 'Europe', 'country': 'England', 'popularity': 'low'},
            'cairn': {'region': 'Europe', 'country': 'Scotland', 'popularity': 'medium'},
            'Dandie_Dinmont': {'region': 'Europe', 'country': 'Scotland', 'popularity': 'low'},
            'malamute': {'region': 'North America', 'country': 'USA', 'popularity': 'medium'},
            'miniature_pinscher': {'region': 'Europe', 'country': 'Germany', 'popularity': 'medium'},
            'Pembroke': {'region': 'Europe', 'country': 'Wales', 'popularity': 'high'},
            'Leonberg': {'region': 'Europe', 'country': 'Germany', 'popularity': 'low'}
        }
        
        # Caracter√≠sticas f√≠sicas que pueden introducir sesgo
        self.breed_characteristics = {
            'size': {
                'toy': ['Japanese_spaniel', 'Maltese_dog', 'papillon', 'Pomeranian', 'silky_terrier', 'toy_terrier', 'Yorkshire_terrier'],
                'small': ['beagle', 'basset', 'cairn', 'Dandie_Dinmont', 'miniature_pinscher', 'Norfolk_terrier', 'Norwich_terrier', 'Pug', 'Shih-Tzu'],
                'medium': ['Australian_terrier', 'Bedlington_terrier', 'Border_terrier', 'Boston_bull', 'chow', 'Pembroke', 'whippet'],
                'large': ['Afghan_hound', 'Airedale', 'bloodhound', 'German_shepherd', 'Labrador_retriever', 'Rottweiler', 'Samoyed'],
                'giant': ['Great_Dane', 'Great_Pyrenees', 'Irish_wolfhound', 'Newfoundland', 'Saint_Bernard']
            },
            'coat_type': {
                'short': ['beagle', 'basset', 'bloodhound', 'Boston_bull', 'German_shepherd', 'Labrador_retriever', 'Pug', 'Rottweiler', 'whippet'],
                'medium': ['Australian_terrier', 'cairn', 'chow', 'Norwegian_elkhound', 'Pembroke', 'Siberian_husky'],
                'long': ['Afghan_hound', 'Bernese_mountain_dog', 'Irish_setter', 'Maltese_dog', 'Newfoundland', 'Shih-Tzu', 'Yorkshire_terrier'],
                'curly': ['Bedlington_terrier', 'Dandie_Dinmont', 'Kerry_blue_terrier', 'Pomeranian'],
                'wire': ['Airedale', 'Border_terrier', 'Lakeland_terrier', 'Norfolk_terrier', 'Norwich_terrier', 'Sealyham_terrier']
            },
            'color_patterns': {
                'solid': ['German_shepherd', 'Rottweiler', 'chow', 'Pug', 'Samoyed'],
                'bicolor': ['Bernese_mountain_dog', 'Boston_bull', 'Border_collie', 'Saint_Bernard'],
                'tricolor': ['beagle', 'basset', 'Airedale', 'Yorkshire_terrier'],
                'spotted': ['bluetick', 'English_setter', 'German_short-haired_pointer'],
                'brindle': ['Boston_bull', 'cairn', 'whippet']
            }
        }
        
    def analyze_dataset_representation_bias(self):
        """Analiza sesgo de representaci√≥n en el dataset"""
        print("üîç AN√ÅLISIS DE SESGO DE REPRESENTACI√ìN")
        print("="*60)
        
        if not self.breed_data_path.exists():
            print("‚ùå No se encontr√≥ el dataset de razas balanceadas")
            return None
            
        breed_stats = {}
        total_images = 0
        
        # Contar im√°genes por raza
        for breed_dir in self.breed_data_path.iterdir():
            if breed_dir.is_dir():
                images = list(breed_dir.glob("*.jpg")) + list(breed_dir.glob("*.png"))
                count = len(images)
                breed_stats[breed_dir.name] = count
                total_images += count
        
        if not breed_stats:
            print("‚ùå No se encontraron datos de razas")
            return None
            
        # Estad√≠sticas b√°sicas
        counts = list(breed_stats.values())
        mean_count = np.mean(counts)
        std_count = np.std(counts)
        cv = std_count / mean_count  # Coeficiente de variaci√≥n
        
        print(f"üìä Estad√≠sticas del Dataset:")
        print(f"   Total de razas: {len(breed_stats)}")
        print(f"   Total de im√°genes: {total_images:,}")
        print(f"   Promedio por raza: {mean_count:.1f}")
        print(f"   Desviaci√≥n est√°ndar: {std_count:.1f}")
        print(f"   Coeficiente de variaci√≥n: {cv:.3f}")
        
        # Interpretaci√≥n del balance
        if cv < 0.05:
            balance_status = "‚úÖ PERFECTAMENTE BALANCEADO"
        elif cv < 0.1:
            balance_status = "‚úÖ MUY BIEN BALANCEADO"
        elif cv < 0.2:
            balance_status = "‚ö†Ô∏è MODERADAMENTE BALANCEADO"
        else:
            balance_status = "‚ùå DESBALANCEADO"
            
        print(f"   Estado del balance: {balance_status}")
        
        return {
            'breed_stats': breed_stats,
            'total_images': total_images,
            'mean_count': mean_count,
            'std_count': std_count,
            'cv': cv,
            'balance_status': balance_status
        }
    
    def analyze_geographical_bias(self):
        """Analiza sesgo geogr√°fico/cultural"""
        print("\nüåç AN√ÅLISIS DE SESGO GEOGR√ÅFICO Y CULTURAL")
        print("="*60)
        
        # Obtener razas del dataset
        dataset_breeds = []
        if self.breed_data_path.exists():
            dataset_breeds = [d.name for d in self.breed_data_path.iterdir() if d.is_dir()]
        
        if not dataset_breeds:
            print("‚ùå No se encontraron razas en el dataset")
            return None
            
        # Analizar distribuci√≥n geogr√°fica
        regional_distribution = defaultdict(list)
        popularity_distribution = defaultdict(list)
        missing_breeds = []
        
        for breed in dataset_breeds:
            if breed in self.breed_geography:
                info = self.breed_geography[breed]
                regional_distribution[info['region']].append(breed)
                popularity_distribution[info['popularity']].append(breed)
            else:
                missing_breeds.append(breed)
        
        print(f"üìç Distribuci√≥n por Regi√≥n:")
        total_classified = sum(len(breeds) for breeds in regional_distribution.values())
        
        for region, breeds in regional_distribution.items():
            percentage = len(breeds) / total_classified * 100
            print(f"   {region:15}: {len(breeds):2d} razas ({percentage:5.1f}%)")
            
        print(f"   Sin clasificar:      {len(missing_breeds):2d} razas")
        
        print(f"\n‚≠ê Distribuci√≥n por Popularidad:")
        for popularity, breeds in popularity_distribution.items():
            percentage = len(breeds) / total_classified * 100
            print(f"   {popularity:12}: {len(breeds):2d} razas ({percentage:5.1f}%)")
        
        # Detectar sesgos
        biases_detected = []
        
        # Sesgo regional
        europe_pct = len(regional_distribution.get('Europe', [])) / total_classified * 100
        if europe_pct > 60:
            biases_detected.append(f"‚ö†Ô∏è SESGO EUROPEO: {europe_pct:.1f}% de razas son europeas")
            
        asia_pct = len(regional_distribution.get('Asia', [])) / total_classified * 100
        if asia_pct < 15:
            biases_detected.append(f"‚ö†Ô∏è SUBREPRESENTACI√ìN ASI√ÅTICA: Solo {asia_pct:.1f}% de razas asi√°ticas")
            
        africa_pct = len(regional_distribution.get('Africa', [])) / total_classified * 100
        if africa_pct < 5:
            biases_detected.append(f"‚ö†Ô∏è SUBREPRESENTACI√ìN AFRICANA: Solo {africa_pct:.1f}% de razas africanas")
        
        # Sesgo de popularidad
        very_high_pct = len(popularity_distribution.get('very_high', [])) / total_classified * 100
        low_pct = len(popularity_distribution.get('low', [])) / total_classified * 100
        
        if very_high_pct > 25:
            biases_detected.append(f"‚ö†Ô∏è SESGO HACIA RAZAS POPULARES: {very_high_pct:.1f}% son muy populares")
            
        if low_pct < 20:
            biases_detected.append(f"‚ö†Ô∏è SUBREPRESENTACI√ìN DE RAZAS RARAS: Solo {low_pct:.1f}% son poco populares")
        
        print(f"\nüö® SESGOS DETECTADOS:")
        if biases_detected:
            for bias in biases_detected:
                print(f"   {bias}")
        else:
            print("   ‚úÖ No se detectaron sesgos geogr√°ficos/culturales significativos")
        
        return {
            'regional_distribution': dict(regional_distribution),
            'popularity_distribution': dict(popularity_distribution),
            'missing_breeds': missing_breeds,
            'biases_detected': biases_detected,
            'total_classified': total_classified
        }
    
    def analyze_physical_characteristics_bias(self):
        """Analiza sesgo en caracter√≠sticas f√≠sicas"""
        print("\nüêï AN√ÅLISIS DE SESGO EN CARACTER√çSTICAS F√çSICAS")
        print("="*60)
        
        # Obtener razas del dataset
        dataset_breeds = []
        if self.breed_data_path.exists():
            dataset_breeds = [d.name for d in self.breed_data_path.iterdir() if d.is_dir()]
        
        if not dataset_breeds:
            return None
            
        # Analizar distribuci√≥n de tama√±os
        size_distribution = defaultdict(list)
        coat_distribution = defaultdict(list)
        color_distribution = defaultdict(list)
        
        for breed in dataset_breeds:
            # Clasificar por tama√±o
            for size, breeds in self.breed_characteristics['size'].items():
                if breed in breeds:
                    size_distribution[size].append(breed)
                    break
            
            # Clasificar por tipo de pelaje
            for coat_type, breeds in self.breed_characteristics['coat_type'].items():
                if breed in breeds:
                    coat_distribution[coat_type].append(breed)
                    break
                    
            # Clasificar por patrones de color
            for color_pattern, breeds in self.breed_characteristics['color_patterns'].items():
                if breed in breeds:
                    color_distribution[color_pattern].append(breed)
                    break
        
        print(f"üìè Distribuci√≥n por Tama√±o:")
        total_size_classified = sum(len(breeds) for breeds in size_distribution.values())
        for size, breeds in size_distribution.items():
            percentage = len(breeds) / len(dataset_breeds) * 100
            print(f"   {size:8}: {len(breeds):2d} razas ({percentage:5.1f}%)")
        
        print(f"\nüß• Distribuci√≥n por Tipo de Pelaje:")
        for coat_type, breeds in coat_distribution.items():
            percentage = len(breeds) / len(dataset_breeds) * 100
            print(f"   {coat_type:8}: {len(breeds):2d} razas ({percentage:5.1f}%)")
        
        print(f"\nüé® Distribuci√≥n por Patrones de Color:")
        for color_pattern, breeds in color_distribution.items():
            percentage = len(breeds) / len(dataset_breeds) * 100
            print(f"   {color_pattern:8}: {len(breeds):2d} razas ({percentage:5.1f}%)")
        
        # Detectar sesgos f√≠sicos
        physical_biases = []
        
        # Sesgo de tama√±o
        small_breeds = len(size_distribution.get('small', [])) + len(size_distribution.get('toy', []))
        large_breeds = len(size_distribution.get('large', [])) + len(size_distribution.get('giant', []))
        
        if small_breeds > large_breeds * 1.5:
            physical_biases.append(f"‚ö†Ô∏è SESGO HACIA PERROS PEQUE√ëOS: {small_breeds} peque√±os vs {large_breeds} grandes")
        elif large_breeds > small_breeds * 1.5:
            physical_biases.append(f"‚ö†Ô∏è SESGO HACIA PERROS GRANDES: {large_breeds} grandes vs {small_breeds} peque√±os")
        
        # Sesgo de pelaje
        long_coat = len(coat_distribution.get('long', []))
        short_coat = len(coat_distribution.get('short', []))
        
        if long_coat > short_coat * 1.5:
            physical_biases.append(f"‚ö†Ô∏è SESGO HACIA PELO LARGO: {long_coat} pelo largo vs {short_coat} pelo corto")
        elif short_coat > long_coat * 1.5:
            physical_biases.append(f"‚ö†Ô∏è SESGO HACIA PELO CORTO: {short_coat} pelo corto vs {long_coat} pelo largo")
        
        print(f"\nüö® SESGOS F√çSICOS DETECTADOS:")
        if physical_biases:
            for bias in physical_biases:
                print(f"   {bias}")
        else:
            print("   ‚úÖ No se detectaron sesgos f√≠sicos significativos")
        
        return {
            'size_distribution': dict(size_distribution),
            'coat_distribution': dict(coat_distribution),
            'color_distribution': dict(color_distribution),
            'physical_biases': physical_biases
        }
    
    def analyze_model_architecture_bias(self):
        """Analiza posibles sesgos introducidos por la arquitectura del modelo"""
        print("\nüèóÔ∏è AN√ÅLISIS DE SESGO EN ARQUITECTURA DEL MODELO")
        print("="*60)
        
        # Analizar el sistema h√≠brido
        print("ü§ñ Sistema H√≠brido Actual:")
        print("   1. Modelo Binario: ResNet18 (perro/no perro)")
        print("   2. Modelo Principal: ResNet50 (50 razas)")
        print("   3. Modelo Selectivo: ResNet34 (6 razas problem√°ticas)")
        
        # Razas en modelo selectivo
        selective_breeds = ['basset', 'beagle', 'Labrador_retriever', 'Norwegian_elkhound', 'pug', 'Samoyed']
        
        print(f"\nüéØ Razas con Modelo Especializado:")
        for breed in selective_breeds:
            print(f"   ‚Ä¢ {breed}")
        
        # Analizar posibles sesgos arquitecturales
        architectural_biases = []
        
        # 1. Sesgo de arquitectura diferente
        architectural_biases.append("‚ö†Ô∏è SESGO ARQUITECTURAL: Diferentes arquitecturas (ResNet18/34/50) pueden tener diferentes capacidades")
        
        # 2. Sesgo de modelo selectivo
        architectural_biases.append("‚ö†Ô∏è SESGO DE ESPECIALIZACI√ìN: 6 razas tienen modelo dedicado, ventaja injusta")
        
        # 3. Sesgo de temperatura scaling
        architectural_biases.append("‚ö†Ô∏è SESGO DE CALIBRACI√ìN: Temperature scaling puede favorecer ciertas predicciones")
        
        # 4. Analizar si las razas selectivas tienen caracter√≠sticas comunes
        print(f"\nüîç An√°lisis de Razas Selectivas:")
        
        selective_characteristics = {
            'regions': [],
            'sizes': [],
            'popularities': []
        }
        
        for breed in selective_breeds:
            if breed in self.breed_geography:
                info = self.breed_geography[breed]
                selective_characteristics['regions'].append(info['region'])
                selective_characteristics['popularities'].append(info['popularity'])
        
        # Verificar si hay patrones en las razas selectivas
        region_counter = Counter(selective_characteristics['regions'])
        popularity_counter = Counter(selective_characteristics['popularities'])
        
        print(f"   Distribuci√≥n regional: {dict(region_counter)}")
        print(f"   Distribuci√≥n popularidad: {dict(popularity_counter)}")
        
        # Sesgo si las razas selectivas est√°n concentradas geogr√°ficamente
        most_common_region = region_counter.most_common(1)[0] if region_counter else None
        if most_common_region and most_common_region[1] >= 4:
            architectural_biases.append(f"‚ö†Ô∏è SESGO GEOGR√ÅFICO EN SELECTIVAS: {most_common_region[1]}/6 razas son de {most_common_region[0]}")
        
        # Sesgo si las razas selectivas tienen popularidades similares
        most_common_popularity = popularity_counter.most_common(1)[0] if popularity_counter else None
        if most_common_popularity and most_common_popularity[1] >= 4:
            architectural_biases.append(f"‚ö†Ô∏è SESGO DE POPULARIDAD EN SELECTIVAS: {most_common_popularity[1]}/6 razas son {most_common_popularity[0]}")
        
        print(f"\nüö® SESGOS ARQUITECTURALES DETECTADOS:")
        for bias in architectural_biases:
            print(f"   {bias}")
        
        return {
            'selective_breeds': selective_breeds,
            'architectural_biases': architectural_biases,
            'selective_characteristics': selective_characteristics
        }
    
    def analyze_evaluation_bias(self):
        """Analiza posibles sesgos en la evaluaci√≥n del modelo"""
        print("\nüìä AN√ÅLISIS DE SESGO EN EVALUACI√ìN")
        print("="*60)
        
        evaluation_biases = []
        
        print("üéØ M√©tricas de Evaluaci√≥n Actuales:")
        print("   ‚Ä¢ Accuracy general: 88.14% (modelo principal)")
        print("   ‚Ä¢ Accuracy selectivo: 95.15% (6 razas)")
        print("   ‚Ä¢ Temperature scaling: 10.0 (calibraci√≥n)")
        print("   ‚Ä¢ Umbral de confianza: 0.35")
        
        # Posibles sesgos en evaluaci√≥n
        evaluation_biases.extend([
            "‚ö†Ô∏è SESGO DE M√âTRICA √öNICA: Solo se usa accuracy, ignora precision/recall por clase",
            "‚ö†Ô∏è SESGO DE DATASET DE PRUEBA: ¬øEs representativo de casos reales?",
            "‚ö†Ô∏è SESGO DE CALIBRACI√ìN: Temperature scaling puede enmascarar problemas reales",
            "‚ö†Ô∏è SESGO DE UMBRAL: Umbral √∫nico (0.35) puede no ser √≥ptimo para todas las razas",
            "‚ö†Ô∏è SESGO DE COMPARACI√ìN DESIGUAL: Modelo selectivo vs principal no es comparaci√≥n justa"
        ])
        
        print(f"\nüö® SESGOS DE EVALUACI√ìN DETECTADOS:")
        for bias in evaluation_biases:
            print(f"   {bias}")
        
        return {
            'evaluation_biases': evaluation_biases,
            'current_metrics': {
                'main_accuracy': 88.14,
                'selective_accuracy': 95.15,
                'temperature': 10.0,
                'confidence_threshold': 0.35
            }
        }
    
    def suggest_bias_mitigation_strategies(self, all_analyses):
        """Sugiere estrategias para mitigar los sesgos detectados"""
        print("\nüí° ESTRATEGIAS DE MITIGACI√ìN DE SESGOS")
        print("="*60)
        
        strategies = []
        
        # Estrategias para sesgo de representaci√≥n
        if all_analyses.get('representation'):
            cv = all_analyses['representation']['cv']
            if cv > 0.1:
                strategies.append({
                    'type': 'Representaci√≥n',
                    'strategy': 'Rebalancear dataset',
                    'description': f'CV={cv:.3f} indica desbalance. Usar data augmentation o resampling.'
                })
        
        # Estrategias para sesgo geogr√°fico
        if all_analyses.get('geographical'):
            biases = all_analyses['geographical']['biases_detected']
            if any('EUROPEO' in bias for bias in biases):
                strategies.append({
                    'type': 'Geogr√°fico',
                    'strategy': 'Diversificaci√≥n regional',
                    'description': 'Incluir m√°s razas de Asia, √Åfrica y Am√©rica para balance global.'
                })
        
        # Estrategias para sesgo arquitectural
        if all_analyses.get('architectural'):
            strategies.extend([
                {
                    'type': 'Arquitectural',
                    'strategy': 'Unificar arquitecturas',
                    'description': 'Usar la misma arquitectura (ej. ResNet50) para todos los modelos.'
                },
                {
                    'type': 'Arquitectural',
                    'strategy': 'Modelo √∫nico multi-cabeza',
                    'description': 'Reemplazar sistema h√≠brido con un modelo √∫nico con m√∫ltiples salidas.'
                },
                {
                    'type': 'Arquitectural',
                    'strategy': 'Eliminaci√≥n del modelo selectivo',
                    'description': 'Remover ventaja injusta de las 6 razas con modelo especializado.'
                }
            ])
        
        # Estrategias para sesgo de evaluaci√≥n
        strategies.extend([
            {
                'type': 'Evaluaci√≥n',
                'strategy': 'M√©tricas por clase',
                'description': 'Reportar precision, recall y F1-score para cada raza individual.'
            },
            {
                'type': 'Evaluaci√≥n',
                'strategy': 'Dataset de prueba estratificado',
                'description': 'Asegurar representaci√≥n equilibrada en conjunto de prueba.'
            },
            {
                'type': 'Evaluaci√≥n',
                'strategy': 'Umbrales adaptativos',
                'description': 'Usar umbrales de confianza espec√≠ficos por raza basados en rendimiento.'
            },
            {
                'type': 'Evaluaci√≥n',
                'strategy': 'Validaci√≥n cruzada estratificada',
                'description': 'Usar k-fold estratificado para evaluaci√≥n m√°s robusta.'
            }
        ])
        
        print("üõ†Ô∏è ESTRATEGIAS RECOMENDADAS:")
        for i, strategy in enumerate(strategies, 1):
            print(f"\n{i:2d}. [{strategy['type']}] {strategy['strategy']}")
            print(f"    üìù {strategy['description']}")
        
        return strategies
    
    def create_bias_visualization(self, all_analyses):
        """Crea visualizaciones de los an√°lisis de sesgo"""
        print("\nüìä CREANDO VISUALIZACIONES DE SESGO...")
        
        fig, axes = plt.subplots(2, 3, figsize=(20, 12))
        axes = axes.ravel()
        
        # 1. Distribuci√≥n regional
        if all_analyses.get('geographical'):
            regional_data = all_analyses['geographical']['regional_distribution']
            if regional_data:
                regions = list(regional_data.keys())
                counts = [len(breeds) for breeds in regional_data.values()]
                
                ax = axes[0]
                bars = ax.bar(regions, counts, color='lightblue', edgecolor='navy')
                ax.set_title('Distribuci√≥n Geogr√°fica de Razas', fontweight='bold')
                ax.set_ylabel('N√∫mero de Razas')
                ax.tick_params(axis='x', rotation=45)
                
                # Agregar valores en las barras
                for bar, count in zip(bars, counts):
                    ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1,
                           str(count), ha='center', va='bottom')
        
        # 2. Distribuci√≥n de popularidad
        if all_analyses.get('geographical'):
            popularity_data = all_analyses['geographical']['popularity_distribution']
            if popularity_data:
                popularities = list(popularity_data.keys())
                counts = [len(breeds) for breeds in popularity_data.values()]
                
                ax = axes[1]
                colors = ['red', 'orange', 'yellow', 'lightgreen'][:len(popularities)]
                bars = ax.bar(popularities, counts, color=colors, edgecolor='black')
                ax.set_title('Distribuci√≥n de Popularidad de Razas', fontweight='bold')
                ax.set_ylabel('N√∫mero de Razas')
                
                for bar, count in zip(bars, counts):
                    ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1,
                           str(count), ha='center', va='bottom')
        
        # 3. Distribuci√≥n de tama√±os
        if all_analyses.get('physical'):
            size_data = all_analyses['physical']['size_distribution']
            if size_data:
                sizes = list(size_data.keys())
                counts = [len(breeds) for breeds in size_data.values()]
                
                ax = axes[2]
                bars = ax.bar(sizes, counts, color='lightcoral', edgecolor='darkred')
                ax.set_title('Distribuci√≥n de Tama√±os de Razas', fontweight='bold')
                ax.set_ylabel('N√∫mero de Razas')
                
                for bar, count in zip(bars, counts):
                    ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1,
                           str(count), ha='center', va='bottom')
        
        # 4. Balance del dataset
        if all_analyses.get('representation'):
            breed_stats = all_analyses['representation']['breed_stats']
            if breed_stats:
                counts = list(breed_stats.values())
                ax = axes[3]
                ax.hist(counts, bins=15, color='lightgreen', edgecolor='darkgreen', alpha=0.7)
                ax.set_title('Distribuci√≥n de Im√°genes por Raza', fontweight='bold')
                ax.set_xlabel('N√∫mero de Im√°genes')
                ax.set_ylabel('N√∫mero de Razas')
                ax.axvline(np.mean(counts), color='red', linestyle='--', 
                          label=f'Media: {np.mean(counts):.0f}')
                ax.legend()
        
        # 5. Razas selectivas vs principales
        ax = axes[4]
        categories = ['Modelo Principal\n(44 razas)', 'Modelo Selectivo\n(6 razas)']
        accuracies = [88.14, 95.15]
        colors = ['lightblue', 'orange']
        
        bars = ax.bar(categories, accuracies, color=colors, edgecolor='black')
        ax.set_title('Comparaci√≥n de Accuracies', fontweight='bold')
        ax.set_ylabel('Accuracy (%)')
        ax.set_ylim(80, 100)
        
        for bar, acc in zip(bars, accuracies):
            ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.5,
                   f'{acc:.1f}%', ha='center', va='bottom', fontweight='bold')
        
        # 6. Resumen de sesgos
        ax = axes[5]
        ax.axis('off')
        
        # Contar sesgos por categor√≠a
        bias_summary = {
            'Geogr√°fico': len(all_analyses.get('geographical', {}).get('biases_detected', [])),
            'F√≠sico': len(all_analyses.get('physical', {}).get('physical_biases', [])),
            'Arquitectural': len(all_analyses.get('architectural', {}).get('architectural_biases', [])),
            'Evaluaci√≥n': len(all_analyses.get('evaluation', {}).get('evaluation_biases', []))
        }
        
        summary_text = "üö® RESUMEN DE SESGOS DETECTADOS\n\n"
        total_biases = 0
        for category, count in bias_summary.items():
            summary_text += f"{category}: {count} sesgos\n"
            total_biases += count
        
        summary_text += f"\nTotal: {total_biases} sesgos detectados"
        
        if total_biases == 0:
            summary_text += "\n\n‚úÖ MODELO LIBRE DE SESGOS"
            color = 'green'
        elif total_biases < 5:
            summary_text += "\n\n‚ö†Ô∏è SESGOS MENORES"
            color = 'orange'
        else:
            summary_text += "\n\nüö® SESGOS SIGNIFICATIVOS"
            color = 'red'
        
        ax.text(0.1, 0.9, summary_text, transform=ax.transAxes, fontsize=12,
               verticalalignment='top', fontfamily='monospace',
               bbox=dict(boxstyle='round', facecolor=color, alpha=0.2))
        
        plt.tight_layout()
        plt.savefig('bias_analysis_report.png', dpi=300, bbox_inches='tight')
        print("   ‚úÖ Visualizaci√≥n guardada: bias_analysis_report.png")
        
        return fig
    
    def run_complete_bias_analysis(self):
        """Ejecuta el an√°lisis completo de sesgos"""
        print("üîç AN√ÅLISIS COMPLETO DE SESGOS EN EL MODELO")
        print("="*80)
        
        all_analyses = {}
        
        # 1. An√°lisis de representaci√≥n
        all_analyses['representation'] = self.analyze_dataset_representation_bias()
        
        # 2. An√°lisis geogr√°fico/cultural
        all_analyses['geographical'] = self.analyze_geographical_bias()
        
        # 3. An√°lisis de caracter√≠sticas f√≠sicas
        all_analyses['physical'] = self.analyze_physical_characteristics_bias()
        
        # 4. An√°lisis arquitectural
        all_analyses['architectural'] = self.analyze_model_architecture_bias()
        
        # 5. An√°lisis de evaluaci√≥n
        all_analyses['evaluation'] = self.analyze_evaluation_bias()
        
        # 6. Estrategias de mitigaci√≥n
        strategies = self.suggest_bias_mitigation_strategies(all_analyses)
        
        # 7. Crear visualizaciones
        fig = self.create_bias_visualization(all_analyses)
        
        # Guardar reporte completo
        self.save_bias_report(all_analyses, strategies)
        
        return {
            'analyses': all_analyses,
            'strategies': strategies,
            'visualization': fig
        }
    
    def save_bias_report(self, analyses, strategies):
        """Guarda un reporte completo del an√°lisis de sesgos"""
        print("\nüíæ GUARDANDO REPORTE DE SESGOS...")
        
        report = {
            'timestamp': pd.Timestamp.now().isoformat(),
            'model_info': {
                'architecture': 'Hierarchical (ResNet18 + ResNet50 + ResNet34)',
                'total_breeds': 50,
                'dataset_balance': analyses.get('representation', {}).get('balance_status', 'Unknown')
            },
            'bias_analyses': analyses,
            'mitigation_strategies': strategies,
            'summary': {
                'total_biases_detected': sum([
                    len(analyses.get('geographical', {}).get('biases_detected', [])),
                    len(analyses.get('physical', {}).get('physical_biases', [])),
                    len(analyses.get('architectural', {}).get('architectural_biases', [])),
                    len(analyses.get('evaluation', {}).get('evaluation_biases', []))
                ]),
                'critical_issues': [],
                'recommendations': []
            }
        }
        
        # Identificar issues cr√≠ticos
        if analyses.get('representation', {}).get('cv', 0) > 0.2:
            report['summary']['critical_issues'].append('Dataset significativamente desbalanceado')
            
        if any('EUROPEO' in bias for bias in analyses.get('geographical', {}).get('biases_detected', [])):
            report['summary']['critical_issues'].append('Sesgo geogr√°fico hacia razas europeas')
            
        # Recomendaciones principales
        report['summary']['recommendations'] = [
            'Unificar arquitectura del modelo para eliminar ventajas injustas',
            'Diversificar dataset con m√°s razas no-europeas',
            'Implementar m√©tricas de evaluaci√≥n por clase individual',
            'Usar validaci√≥n cruzada estratificada para evaluaci√≥n robusta'
        ]
        
        # Guardar como JSON
        with open('bias_analysis_report.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False, default=str)
        
        print("   ‚úÖ Reporte guardado: bias_analysis_report.json")
        
        return report

def main():
    """Funci√≥n principal"""
    workspace_path = r"c:\Users\juliy\OneDrive\Escritorio\NOTDOG YESDOG"
    
    analyzer = BiasDetectionAnalyzer(workspace_path)
    results = analyzer.run_complete_bias_analysis()
    
    return results

if __name__ == "__main__":
    results = main()