#!/usr/bin/env python3
"""
üîç AN√ÅLISIS DE FALSOS NEGATIVOS - MODELO 119 CLASES
==================================================
Identificar razas con recall bajo que generan muchos falsos negativos
(El modelo NO detecta la raza cuando S√ç est√° presente)
"""

import json
import pandas as pd
import numpy as np
from collections import defaultdict

class FalseNegativeAnalyzer:
    def __init__(self):
        self.class_metrics = {}
        self.load_data()
        
    def load_data(self):
        """Cargar m√©tricas de las 119 clases"""
        try:
            with open('class_metrics.json', 'r') as f:
                self.class_metrics = json.load(f)
            
            print(f"‚úÖ Cargadas m√©tricas de {len(self.class_metrics)} clases")
            
        except Exception as e:
            print(f"‚ùå Error cargando datos: {e}")
    
    def analyze_false_negatives(self):
        """Analizar razas con alto riesgo de falsos negativos"""
        print("\n" + "="*70)
        print("üî¥ AN√ÅLISIS DE FALSOS NEGATIVOS - RECALL BAJO")
        print("="*70)
        
        # Crear DataFrame con m√©tricas
        df_data = []
        for breed, metrics in self.class_metrics.items():
            recall = metrics.get('recall', 0)
            precision = metrics.get('precision', 0)
            f1_score = metrics.get('f1_score', 0)
            support = metrics.get('support', 0)
            accuracy = metrics.get('accuracy', 0)
            avg_confidence = metrics.get('avg_confidence', 0)
            std_confidence = metrics.get('std_confidence', 0)
            
            # Calcular falsos negativos aproximados
            true_positives = recall * support
            false_negatives = support - true_positives
            false_negative_rate = false_negatives / support if support > 0 else 0
            
            df_data.append({
                'breed': breed,
                'recall': recall,
                'precision': precision,
                'f1_score': f1_score,
                'support': support,
                'accuracy': accuracy,
                'avg_confidence': avg_confidence,
                'std_confidence': std_confidence,
                'false_negatives': false_negatives,
                'false_negative_rate': false_negative_rate
            })
        
        df = pd.DataFrame(df_data)
        
        # Ordenar por recall ascendente (peores primero)
        df_sorted = df.sort_values('recall')
        
        print("\nüö® TOP 15 RAZAS CON M√ÅS FALSOS NEGATIVOS (Recall m√°s bajo):")
        print("=" * 80)
        print(f"{'Raza':25} | {'Recall':6} | {'FN':3} | {'FN%':5} | {'Prec':6} | {'F1':6} | {'Conf':6}")
        print("=" * 80)
        
        worst_recall_breeds = []
        
        for idx, row in df_sorted.head(15).iterrows():
            breed = row['breed']
            recall = row['recall']
            fn_count = int(row['false_negatives'])
            fn_rate = row['false_negative_rate']
            precision = row['precision']
            f1 = row['f1_score']
            confidence = row['avg_confidence']
            
            # Clasificar severidad
            if recall < 0.50:
                severity = "üî¥ CR√çTICO"
            elif recall < 0.70:
                severity = "üü† ALTO"
            elif recall < 0.85:
                severity = "üü° MEDIO"
            else:
                severity = "üü¢ BAJO"
            
            print(f"{breed[:24]:25} | {recall:.3f} | {fn_count:3} | {fn_rate:.1%} | {precision:.3f} | {f1:.3f} | {confidence:.3f}")
            
            worst_recall_breeds.append({
                'breed': breed,
                'recall': recall,
                'false_negatives': fn_count,
                'severity': severity,
                'precision': precision,
                'f1_score': f1
            })
        
        return worst_recall_breeds, df
    
    def categorize_false_negative_causes(self, worst_breeds):
        """Categorizar las causas probables de los falsos negativos"""
        print("\n" + "="*70)
        print("üîç AN√ÅLISIS DE CAUSAS DE FALSOS NEGATIVOS")
        print("="*70)
        
        # Grupos de razas similares que pueden causar confusi√≥n
        similar_groups = {
            "Terriers Peque√±os": [
                "Norfolk_terrier", "Norwich_terrier", "cairn", "Yorkshire_terrier",
                "West_Highland_white_terrier", "Scottish_terrier", "Australian_terrier",
                "toy_terrier", "Lakeland_terrier", "Border_terrier"
            ],
            "Perros N√≥rdicos/Spitz": [
                "Siberian_husky", "malamute", "Samoyed", "Eskimo_dog",
                "Norwegian_elkhound", "Pomeranian", "keeshond", "chow"
            ],
            "Galgos/Lebreles": [
                "whippet", "Italian_greyhound", "Afghan_hound", "borzoi",
                "Ibizan_hound", "Saluki", "Scottish_deerhound"
            ],
            "Spaniels": [
                "cocker_spaniel", "English_springer", "Welsh_springer_spaniel",
                "Japanese_spaniel", "Blenheim_spaniel", "Sussex_spaniel"
            ],
            "Pastores": [
                "German_shepherd", "collie", "Border_collie", "Shetland_sheepdog",
                "Old_English_sheepdog", "malinois", "groenendael"
            ]
        }
        
        print("\nüìä CATEGORIZACI√ìN POR GRUPOS PROBLEM√ÅTICOS:")
        print("-" * 50)
        
        group_problems = {}
        
        for group_name, breeds in similar_groups.items():
            group_false_negatives = []
            
            for breed_data in worst_breeds:
                breed = breed_data['breed']
                if breed in breeds:
                    group_false_negatives.append(breed_data)
            
            if group_false_negatives:
                group_problems[group_name] = group_false_negatives
                
                print(f"\nüîç Grupo: {group_name}")
                print(f"   Razas problem√°ticas: {len(group_false_negatives)}")
                
                for breed_data in group_false_negatives:
                    breed = breed_data['breed']
                    recall = breed_data['recall']
                    fn_count = breed_data['false_negatives']
                    severity = breed_data['severity']
                    
                    print(f"   - {breed:20} | Recall: {recall:.3f} | FN: {fn_count:2} | {severity}")
        
        return group_problems
    
    def analyze_recall_vs_precision_balance(self, df):
        """Analizar el balance entre recall y precision"""
        print("\n" + "="*70)
        print("‚öñÔ∏è  AN√ÅLISIS DE BALANCE RECALL vs PRECISION")
        print("="*70)
        
        # Identificar casos donde recall << precision (muchos falsos negativos)
        df['recall_precision_diff'] = df['precision'] - df['recall']
        
        # Casos donde precision es mucho mayor que recall
        high_imbalance = df[df['recall_precision_diff'] > 0.2].sort_values('recall_precision_diff', ascending=False)
        
        print("\nüéØ RAZAS CON DESEQUILIBRIO RECALL << PRECISION:")
        print("   (Modelo muy conservador - genera muchos falsos negativos)")
        print("-" * 65)
        print(f"{'Raza':25} | {'Recall':6} | {'Prec':6} | {'Diff':6} | {'Interpretaci√≥n'}")
        print("-" * 65)
        
        for idx, row in high_imbalance.head(10).iterrows():
            breed = row['breed']
            recall = row['recall']
            precision = row['precision']
            diff = row['recall_precision_diff']
            
            if diff > 0.4:
                interpretation = "MUY CONSERVADOR"
            elif diff > 0.3:
                interpretation = "CONSERVADOR"
            elif diff > 0.2:
                interpretation = "ALGO CONSERVADOR"
            else:
                interpretation = "BALANCEADO"
            
            print(f"{breed[:24]:25} | {recall:.3f} | {precision:.3f} | {diff:+.3f} | {interpretation}")
        
        return high_imbalance
    
    def generate_false_negative_recommendations(self, worst_breeds, group_problems, imbalanced_breeds):
        """Generar recomendaciones espec√≠ficas para reducir falsos negativos"""
        print("\n" + "="*70)
        print("üí° RECOMENDACIONES PARA REDUCIR FALSOS NEGATIVOS")
        print("="*70)
        
        # Razas que necesitan atenci√≥n inmediata
        critical_breeds = [b for b in worst_breeds if b['recall'] < 0.60]
        high_priority_breeds = [b for b in worst_breeds if 0.60 <= b['recall'] < 0.75]
        
        print(f"\nüö® ATENCI√ìN CR√çTICA ({len(critical_breeds)} razas con Recall < 0.60):")
        print("-" * 50)
        for breed_data in critical_breeds:
            breed = breed_data['breed']
            recall = breed_data['recall']
            fn_count = breed_data['false_negatives']
            print(f"  üî¥ {breed:25} | Recall: {recall:.3f} | FN: {fn_count:2}")
        
        print(f"\n‚ö†Ô∏è  ALTA PRIORIDAD ({len(high_priority_breeds)} razas con Recall 0.60-0.75):")
        print("-" * 50)
        for breed_data in high_priority_breeds:
            breed = breed_data['breed']
            recall = breed_data['recall']
            fn_count = breed_data['false_negatives']
            print(f"  üü† {breed:25} | Recall: {recall:.3f} | FN: {fn_count:2}")
        
        print("\nüõ†Ô∏è  ESTRATEGIAS ESPEC√çFICAS:")
        print("-" * 40)
        
        strategies = [
            "1. üìà AUMENTAR THRESHOLD de clasificaci√≥n para razas conservadoras",
            "2. üéØ WEIGHTED LOSS function con penalizaci√≥n extra por falsos negativos",
            "3. üîÑ DATA AUGMENTATION espec√≠fica para razas con pocos ejemplos detectados",
            "4. üß† FOCAL LOSS para balancear clases dif√≠ciles",
            "5. üìä ENSEMBLE METHODS para mejorar sensibilidad",
            "6. üé® FEATURE ENHANCEMENT para caracter√≠sticas distintivas",
            "7. ‚öñÔ∏è  THRESHOLD TUNING por raza individual",
            "8. üîç HARD NEGATIVE MINING para casos dif√≠ciles"
        ]
        
        for strategy in strategies:
            print(f"  {strategy}")
        
        print("\nüéØ ACCIONES INMEDIATAS POR GRUPO:")
        print("-" * 35)
        
        if "Terriers Peque√±os" in group_problems:
            print("  üêï TERRIERS PEQUE√ëOS:")
            print("     - Enfocarse en diferencias sutiles de orejas y pelaje")
            print("     - Augmentaci√≥n con variaciones de √°ngulo y postura")
        
        if "Perros N√≥rdicos/Spitz" in group_problems:
            print("  ‚ùÑÔ∏è  PERROS N√ìRDICOS:")
            print("     - Destacar diferencias de tama√±o y forma de cola")
            print("     - M√°s datos de diferentes estaciones/backgrounds")
        
        if "Galgos/Lebreles" in group_problems:
            print("  üèÉ GALGOS/LEBRELES:")
            print("     - Enfoque en proporciones corporales espec√≠ficas")
            print("     - Im√°genes de cuerpo completo, no solo cabeza")
        
        # Guardar reporte
        report_data = {
            'timestamp': pd.Timestamp.now().isoformat(),
            'analysis_type': 'false_negatives',
            'total_breeds_analyzed': len(self.class_metrics),
            'critical_breeds': [b['breed'] for b in critical_breeds],
            'high_priority_breeds': [b['breed'] for b in high_priority_breeds],
            'worst_recall_breeds': worst_breeds,
            'group_problems': {k: [b['breed'] for b in v] for k, v in group_problems.items()},
            'recommendations': strategies
        }
        
        with open('false_negatives_analysis_119.json', 'w') as f:
            json.dump(report_data, f, indent=2)
        
        print(f"\nüíæ Reporte guardado en: false_negatives_analysis_119.json")
        
        return report_data

def main():
    """Ejecutar an√°lisis completo de falsos negativos"""
    print("üîç Iniciando An√°lisis de Falsos Negativos - Modelo 119 Clases...")
    
    analyzer = FalseNegativeAnalyzer()
    
    if not analyzer.class_metrics:
        print("‚ùå No se pudieron cargar las m√©tricas. Verifica que class_metrics.json existe.")
        return
    
    # An√°lisis principal
    worst_breeds, df = analyzer.analyze_false_negatives()
    
    # Categorizar causas
    group_problems = analyzer.categorize_false_negative_causes(worst_breeds)
    
    # Analizar balance recall vs precision
    imbalanced_breeds = analyzer.analyze_recall_vs_precision_balance(df)
    
    # Generar recomendaciones
    report = analyzer.generate_false_negative_recommendations(worst_breeds, group_problems, imbalanced_breeds)
    
    print("\n‚úÖ An√°lisis de falsos negativos completado!")
    print(f"üìä {len(worst_breeds)} razas identificadas con problemas de recall")
    print(f"üéØ {len([b for b in worst_breeds if b['recall'] < 0.60])} razas necesitan atenci√≥n cr√≠tica")

if __name__ == "__main__":
    main()